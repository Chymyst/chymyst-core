package sample

import MacroTest._
import org.scalatest.{FlatSpec, Matchers}

import scala.language.postfixOps

class MacroTestSpec extends FlatSpec with Matchers {
  it should "display raw desugared tree" in {
    val tree = rawTree( { case Blob((1, Some(x)), (2,y)) if x > 0 => x+y } : PartialFunction[Blob,Any])

    tree shouldEqual "Typed(Typed(Block(List(ClassDef(Modifiers(FINAL | SYNTHETIC), TypeName(\"$anonfun\"), List(), Template(List(TypeTree(), TypeTree()), noSelfType, List(DefDef(Modifiers(), termNames.CONSTRUCTOR, List(), List(List()), TypeTree(), Block(List(Apply(Select(Super(This(TypeName(\"$anonfun\")), typeNames.EMPTY), termNames.CONSTRUCTOR), List())), Literal(Constant(())))), DefDef(Modifiers(OVERRIDE | FINAL | METHOD), TermName(\"applyOrElse\"), List(TypeDef(Modifiers(DEFERRED | PARAM), TypeName(\"A1\"), List(), TypeTree().setOriginal(TypeBoundsTree(TypeTree(), TypeTree()))), TypeDef(Modifiers(DEFERRED | PARAM), TypeName(\"B1\"), List(), TypeTree().setOriginal(TypeBoundsTree(TypeTree(), TypeTree())))), List(List(ValDef(Modifiers(PARAM | SYNTHETIC | TRIEDCOOKING), TermName(\"x1\"), TypeTree().setOriginal(Ident(TypeName(\"A1\"))), EmptyTree), ValDef(Modifiers(PARAM | SYNTHETIC), TermName(\"default\"), TypeTree().setOriginal(AppliedTypeTree(Select(This(TypeName(\"scala\")), scala.Function1), List(TypeTree().setOriginal(Ident(TypeName(\"A1\"))), TypeTree().setOriginal(Ident(TypeName(\"B1\")))))), EmptyTree))), TypeTree(), Match(Typed(Typed(TypeApply(Select(Ident(TermName(\"x1\")), TermName(\"asInstanceOf\")), List(TypeTree())), TypeTree()), TypeTree().setOriginal(Annotated(Apply(Select(New(Select(Ident(scala), scala.unchecked)), termNames.CONSTRUCTOR), List()), Typed(TypeApply(Select(Ident(TermName(\"x1\")), TermName(\"asInstanceOf\")), List(TypeTree())), TypeTree())))), List(CaseDef(Apply(TypeTree().setOriginal(Ident(sample.Blob)), List(Apply(TypeTree().setOriginal(Select(Ident(scala), scala.Tuple2)), List(Literal(Constant(1)), Apply(TypeTree().setOriginal(Select(Ident(scala), scala.Some)), List(Bind(TermName(\"x\"), Ident(termNames.WILDCARD)))))), Apply(TypeTree().setOriginal(Select(Ident(scala), scala.Tuple2)), List(Literal(Constant(2)), Bind(TermName(\"y\"), Ident(termNames.WILDCARD)))))), Apply(Select(Ident(TermName(\"x\")), TermName(\"$greater\")), List(Literal(Constant(0)))), Apply(Select(Ident(TermName(\"x\")), TermName(\"$plus\")), List(Ident(TermName(\"y\"))))), CaseDef(Bind(TermName(\"defaultCase$\"), Ident(termNames.WILDCARD)), EmptyTree, Apply(Select(Ident(TermName(\"default\")), TermName(\"apply\")), List(Ident(TermName(\"x1\")))))))), DefDef(Modifiers(FINAL | METHOD), TermName(\"isDefinedAt\"), List(), List(List(ValDef(Modifiers(PARAM | SYNTHETIC | TRIEDCOOKING), TermName(\"x1\"), TypeTree(), EmptyTree))), TypeTree(), Match(Typed(Typed(TypeApply(Select(Ident(TermName(\"x1\")), TermName(\"asInstanceOf\")), List(TypeTree())), TypeTree()), TypeTree().setOriginal(Annotated(Apply(Select(New(Select(Ident(scala), scala.unchecked)), termNames.CONSTRUCTOR), List()), Typed(TypeApply(Select(Ident(TermName(\"x1\")), TermName(\"asInstanceOf\")), List(TypeTree())), TypeTree())))), List(CaseDef(Apply(TypeTree().setOriginal(Ident(sample.Blob)), List(Apply(TypeTree().setOriginal(Select(Ident(scala), scala.Tuple2)), List(Literal(Constant(1)), Apply(TypeTree().setOriginal(Select(Ident(scala), scala.Some)), List(Bind(TermName(\"x\"), Ident(termNames.WILDCARD)))))), Apply(TypeTree().setOriginal(Select(Ident(scala), scala.Tuple2)), List(Literal(Constant(2)), Bind(TermName(\"y\"), Ident(termNames.WILDCARD)))))), Apply(Select(Ident(TermName(\"x\")), TermName(\"$greater\")), List(Literal(Constant(0)))), Literal(Constant(true))), CaseDef(Bind(TermName(\"defaultCase$\"), Ident(termNames.WILDCARD)), EmptyTree, Literal(Constant(false)))))))))), Apply(Select(New(Ident(TypeName(\"$anonfun\"))), termNames.CONSTRUCTOR), List())), TypeTree()), TypeTree().setOriginal(AppliedTypeTree(Select(Ident(scala), scala.PartialFunction), List(TypeTree().setOriginal(Ident(sample.Blob)), TypeTree().setOriginal(Select(Ident(scala), scala.Any))))))"
  }
}